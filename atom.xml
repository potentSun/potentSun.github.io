<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>potentSun的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://potentsun.github.io/"/>
  <updated>2018-07-12T02:47:14.561Z</updated>
  <id>https://potentsun.github.io/</id>
  
  <author>
    <name>potentSun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cat</title>
    <link href="https://potentsun.github.io/2018/07/12/cat/"/>
    <id>https://potentsun.github.io/2018/07/12/cat/</id>
    <published>2018-07-12T02:47:03.000Z</published>
    <updated>2018-07-12T02:47:14.561Z</updated>
    
    <content type="html"><![CDATA[<p>cat</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;cat&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript强制类型转换</title>
    <link href="https://potentsun.github.io/2018/05/07/JavaScript%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://potentsun.github.io/2018/05/07/JavaScript强制类型转换/</id>
    <published>2018-05-07T12:46:54.000Z</published>
    <updated>2018-05-07T14:08:21.528Z</updated>
    
    <content type="html"><![CDATA[<h3 id="值类型转换"><a href="#值类型转换" class="headerlink" title="值类型转换"></a>值类型转换</h3><p>将值从一种类型转换为另一种类型通常称为类型转换(type casting) 这是显式的情况<br>隐式的情况成为强制类型转换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">var</span> b = a + <span class="string">""</span>;  <span class="comment">// "42" 隐式强制类型转换</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">String</span>(a); <span class="comment">// "42" 显式强制类型转换</span></span><br></pre></td></tr></table></figure></p><h3 id="抽象值操作"><a href="#抽象值操作" class="headerlink" title="抽象值操作"></a>抽象值操作</h3><p>抽象操作指的就是仅供内部使用的操作</p><h3 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h3><p>它负责处理非字符串到字符串的强制类型转换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> <span class="comment">// "null"</span></span><br><span class="line"><span class="literal">undefined</span> <span class="comment">// "undefined"</span></span><br></pre></td></tr></table></figure></p><p>数组的默认toString()方法经过了重新定义<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.toString(); <span class="comment">// "1,2,3"</span></span><br></pre></td></tr></table></figure></p><p>Json的字符串化<br>JSON.stringify()在将JSON对象转换为字符串时也用到了ToString<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">安全的<span class="built_in">JSON</span>值</span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="number">42</span>); <span class="comment">// "42" </span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="string">"42"</span>); <span class="comment">// ""42"" </span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">null</span>); <span class="comment">// "null"</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(<span class="literal">true</span>); <span class="comment">// "true"</span></span><br><span class="line"></span><br><span class="line">不安全的<span class="built_in">JSON</span>值</span><br><span class="line"><span class="literal">undefined</span> <span class="function"><span class="keyword">function</span> <span class="title">symbol</span>和包含循环引用的对象都不符合<span class="title">JSON</span>结构标准</span></span><br><span class="line"><span class="function"><span class="title">JSON</span>.<span class="title">stringify</span>(<span class="params">undefined</span>);  // <span class="title">undefined</span></span></span><br><span class="line"><span class="function"><span class="title">JSON</span>.<span class="title">stringify</span>(<span class="params">function(</span>)</span>&#123;&#125;); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify([<span class="number">5</span>,<span class="literal">undefined</span>,functtion()&#123;&#125;,<span class="number">6</span>]); <span class="comment">// "[5 undefined undefined 6]"</span></span><br></pre></td></tr></table></figure></p><p>JSON.stringify()并不是强制类型转换<br>字符串 数字 布尔值 null的JSON.stringify()规则与ToString基本相同<br>如果传递给JSON.stringify()的对象中定义了toJSON()方法，那么该方法会在字符串化前调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;值类型转换&quot;&gt;&lt;a href=&quot;#值类型转换&quot; class=&quot;headerlink&quot; title=&quot;值类型转换&quot;&gt;&lt;/a&gt;值类型转换&lt;/h3&gt;&lt;p&gt;将值从一种类型转换为另一种类型通常称为类型转换(type casting) 这是显式的情况&lt;br&gt;隐式的情况成为强制
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://potentsun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://potentsun.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象</title>
    <link href="https://potentsun.github.io/2018/03/27/JavaScript%E5%AF%B9%E8%B1%A1/"/>
    <id>https://potentsun.github.io/2018/03/27/JavaScript对象/</id>
    <published>2018-03-26T16:13:59.000Z</published>
    <updated>2018-03-29T16:19:04.406Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h3><p>对象可以通过两种形式定义：声明(文字)形式和构造形式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123; <span class="comment">//声明形式</span></span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line">vat myObj = <span class="keyword">new</span> object(); <span class="comment">//构造形式</span></span><br><span class="line">myObj.age = <span class="number">18</span>; </span><br><span class="line"></span><br><span class="line">多数情况下都会使用第一种形式</span><br></pre></td></tr></table></figure></p><h3 id="JavaScript类型"><a href="#JavaScript类型" class="headerlink" title="JavaScript类型"></a>JavaScript类型</h3><p>对象是JavaScript的基础，在JavaScript中一共有六种数据类型</p><p>1.string<br>2.number<br>3.boolean<br>4.null<br>5.undefined<br>6.object</p><p>在ES6里新定义了一种数据类型Symbol算是第七种</p><p>注意null比较特殊,有时会被当做一种对象类型,typeof null的时候,会返回字符串”object”,实际上null只是基本类型</p><p>这个问题的原理是这样的<br>不同的对象在底层中都表示二进制，在JavaScript中二进制前三位都为0的话会被判断为object类型,null的二进制表示全是0,<br>所以在执行typeof的时候会返回”object”</p><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>1.String<br>2.Number<br>3.Boolean<br>4.Object<br>5.Function<br>6.Array<br>7.Date<br>8.RegExp<br>9.Error</p><h3 id="属性描述符"><a href="#属性描述符" class="headerlink" title="属性描述符"></a>属性描述符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.getOwnProperDescriptor(myObj,<span class="string">"age"</span>);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     value: 18,</span></span><br><span class="line"><span class="comment">//     writable: true,</span></span><br><span class="line"><span class="comment">//     configurable: true,</span></span><br><span class="line"><span class="comment">//     enumberable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>writable(可写)  configurable(可配置)  enumberable(可枚举)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JavaScript语法&quot;&gt;&lt;a href=&quot;#JavaScript语法&quot; class=&quot;headerlink&quot; title=&quot;JavaScript语法&quot;&gt;&lt;/a&gt;JavaScript语法&lt;/h3&gt;&lt;p&gt;对象可以通过两种形式定义：声明(文字)形式和构造形式。&lt;br
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://potentsun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://potentsun.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript this解析</title>
    <link href="https://potentsun.github.io/2018/03/15/JavaScript%20this%E8%A7%A3%E6%9E%90/"/>
    <id>https://potentsun.github.io/2018/03/15/JavaScript this解析/</id>
    <published>2018-03-15T09:18:00.000Z</published>
    <updated>2018-03-22T06:26:01.832Z</updated>
    
    <content type="html"><![CDATA[<h3 id="理解调用位置"><a href="#理解调用位置" class="headerlink" title="理解调用位置"></a>理解调用位置</h3><p>调用位置就是函数在代码中被调用的位置（不是声明时的位置）</p><p>举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//当前调用栈是： baz</span></span><br><span class="line">    <span class="comment">//调用位置是全局作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"baz"</span>);</span><br><span class="line">    bar(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//当前调用栈是： baz -&gt; bar</span></span><br><span class="line">    <span class="comment">//调用位置是在 baz中</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"bar"</span>);</span><br><span class="line">    foo(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//当前调用栈是： baz -&gt; bar -&gt; foo</span></span><br><span class="line">    <span class="comment">//调用位置是在 bar中</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"foo"</span>); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baz();</span><br></pre></td></tr></table></figure></p><h3 id="绑定规则"><a href="#绑定规则" class="headerlink" title="绑定规则"></a>绑定规则</h3><p>1.默认绑定<br>2.隐式绑定<br>3.显式绑定<br>4.new绑定</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;理解调用位置&quot;&gt;&lt;a href=&quot;#理解调用位置&quot; class=&quot;headerlink&quot; title=&quot;理解调用位置&quot;&gt;&lt;/a&gt;理解调用位置&lt;/h3&gt;&lt;p&gt;调用位置就是函数在代码中被调用的位置（不是声明时的位置）&lt;/p&gt;
&lt;p&gt;举个例子&lt;br&gt;&lt;figure cl
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://potentsun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://potentsun.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包</title>
    <link href="https://potentsun.github.io/2018/03/14/JavaScript%E9%97%AD%E5%8C%85/"/>
    <id>https://potentsun.github.io/2018/03/14/JavaScript闭包/</id>
    <published>2018-03-14T06:41:32.000Z</published>
    <updated>2018-03-22T06:26:01.833Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a>什么是闭包？</h3><p>举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz(); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></p><p>这就是闭包的效果，可以在自己的词法作用域以外的地方执行。<br>一般来讲，当函数执行完毕后，局部活动对象就会销毁，内存仅保存全局作用域。但是，闭包的情况不同，closure函数执行完毕后，其活动对象不会销毁，因为匿名函数的作用域链仍然引用这个活动对象。直到匿名函数被销毁后，closure函数的活动对象才会被销毁。</p><h3 id="闭包的好处与坏处"><a href="#闭包的好处与坏处" class="headerlink" title="闭包的好处与坏处"></a>闭包的好处与坏处</h3><p>闭包的好处有：<br>1.缓存<br>2.面向对象中的对象<br>3.实现封装，防止变量跑到外层作用域中，发生命名冲突<br>4.匿名自执行函数，匿名自执行函数可以减小内存消耗</p><p>闭包的坏处有：<br>1.内存消耗<br>2.性能问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是闭包？&quot;&gt;&lt;a href=&quot;#什么是闭包？&quot; class=&quot;headerlink&quot; title=&quot;什么是闭包？&quot;&gt;&lt;/a&gt;什么是闭包？&lt;/h3&gt;&lt;p&gt;举个例子&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://potentsun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://potentsun.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript变量提升</title>
    <link href="https://potentsun.github.io/2018/03/13/JavaScript%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87/"/>
    <id>https://potentsun.github.io/2018/03/13/JavaScript变量提升/</id>
    <published>2018-03-13T09:50:29.000Z</published>
    <updated>2018-03-22T06:26:01.832Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先有鸡还是先有蛋？"><a href="#先有鸡还是先有蛋？" class="headerlink" title="先有鸡还是先有蛋？"></a>先有鸡还是先有蛋？</h3><p>举个例子<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>到底是声明在前，还是赋值在前？<br>正确的思考思路是，包括变量和函数在内的所有声明都会在任何代码被执行前首先被处理。</p><p>以上例子会以如下形式进行处理：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line">b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure></p><p>要记住，先有声明后有赋值。<br>只有声明本身会被提升，而赋值或其他运行逻辑会留在原地。<br>函数声明和变量声明都会被提升，函数会被首先提升，然后才是变量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;先有鸡还是先有蛋？&quot;&gt;&lt;a href=&quot;#先有鸡还是先有蛋？&quot; class=&quot;headerlink&quot; title=&quot;先有鸡还是先有蛋？&quot;&gt;&lt;/a&gt;先有鸡还是先有蛋？&lt;/h3&gt;&lt;p&gt;举个例子&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://potentsun.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://potentsun.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
